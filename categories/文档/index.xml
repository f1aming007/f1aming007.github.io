<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>文档 - Category - flamingo</title>
        <link>https://f1aming007.github.io/categories/%E6%96%87%E6%A1%A3/</link>
        <description>文档 - Category - flamingo</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>fxqi1221@gmail.com (flamingo)</managingEditor>
            <webMaster>fxqi1221@gmail.com (flamingo)</webMaster><lastBuildDate>Sat, 05 Aug 2023 08:51:09 &#43;0800</lastBuildDate><atom:link href="https://f1aming007.github.io/categories/%E6%96%87%E6%A1%A3/" rel="self" type="application/rss+xml" /><item>
    <title>Golang Iota</title>
    <link>https://f1aming007.github.io/golang-iota/</link>
    <pubDate>Sat, 05 Aug 2023 08:51:09 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-iota/</guid>
    <description><![CDATA[<h1 id="iota-介绍">Iota 介绍</h1>
<ul>
<li>在常量声明中，预先声明的标识符<code>iota</code>代表连续的无类型的整数常量， 他的值是该常量声明中对应<code>ConstSpec</code>的索引，从零开始计数。</li>
<li>iota： 可以在常量声明中自动创建一系列连续的整数值，值从零开始， 不需要手动指定每个常量的值</li>
</ul>]]></description>
</item>
<item>
    <title>Redfish Api</title>
    <link>https://f1aming007.github.io/redfish-api/</link>
    <pubDate>Sat, 08 Jul 2023 09:57:04 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/redfish-api/</guid>
    <description><![CDATA[Redfish Api Redfish 利用常见的互联网和web 服务标准将信息直接提供给相关的工具链 IPMI 是一种较早的带外管理管理工具，仅限最小公共集命令集（开机/关机/重启/温]]></description>
</item>
<item>
    <title>Golang Protobuf MessageMode</title>
    <link>https://f1aming007.github.io/golang-protobuf-messagemode/</link>
    <pubDate>Sat, 01 Jul 2023 11:02:39 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-protobuf-messagemode/</guid>
    <description><![CDATA[<h1 id="minionhttpsimagesunsplashcomphoto-1661956603025-8310b2e3036dixlibrb-403ixidm3wxmja3fdf8mhxwag90by1wywdlfhx8fgvufdb8fhx8fa3d3dautoformatfitcropw1740q80"></h1>
<h1 id="-grpc-教程--protobuf-通信模式">🔥 gRpc 教程- protobuf 通信模式</h1>
<p><strong>四种通信模式</strong></p>
<ol>
<li>Simple RPC</li>
<li>Server-Streaming RPC</li>
<li>Client-Streaming RPC</li>
<li>Bidirectionnal-Streaming RPC</li>
</ol>]]></description>
</item>
<item>
    <title>Golang Protobuf Base</title>
    <link>https://f1aming007.github.io/golang-protobuf-base/</link>
    <pubDate>Sat, 01 Jul 2023 09:37:21 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-protobuf-base/</guid>
    <description><![CDATA[<p></p>
<h1 id="-grpc-教程--protobuf-基础">🔥 gRpc 教程- protobuf 基础</h1>
<ul>
<li><strong>序列化协议</strong>： <code>grpc</code> 使用 <code>protobuf</code>, 首先使用protobuf 定义服务，然后使用这个文件来生成客户端和服务端的代码， 因为pb是跨语言的， 因此使用服务端和客户端语言并不一致也可以相互序列化和反序列化</li>
<li><strong>网络传输层</strong>： grpc使用的是<code>http2.0协议</code>，</li>
</ul>]]></description>
</item>
<item>
    <title>🔥Golang Beradth FirstSearch</title>
    <link>https://f1aming007.github.io/golang-beradth-firstsearch/</link>
    <pubDate>Sat, 10 Jun 2023 10:06:01 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-beradth-firstsearch/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法---快速排序quicksort">🔥Golang算法 - 快速排序（Quicksort）</h1>
<p>广度优先算法的核心思想是：从初始节点开始，应用算符生成第一层节点，检查目标节点是否在这些后继节点中，若没有，再用产生式规则将所有第一层的节点逐一扩展，得到第二层节点，并逐一检查第二层节点中是否包含目标节点。若没有，再用算符逐一扩展第二层的所有节点……，如此依次扩展，检查下去，直到发现目标节点为止。即</p>]]></description>
</item>
<item>
    <title>Golang Viper</title>
    <link>https://f1aming007.github.io/golang-viper/</link>
    <pubDate>Fri, 09 Jun 2023 15:39:40 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-viper/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang-viper-介绍">golang-viper 介绍</h1>
<p>viper 是一个配置解决方案，用于丰富的特性</p>
<ul>
<li>支持 JSON/TOML/YAML/HCL/envfile/Java properties 等多种格式的配置文件</li>
<li>可以设置监听配置文件的修改，修改时自动加载新的配置；</li>
<li>从环境变量、命令行选项和<code>io.Reader</code>中读取配置</li>
<li>从远程配置系统中读取和监听修改，如 etcd/Consul；</li>
<li>代码逻辑中显示设置健值</li>
</ul>]]></description>
</item>
<item>
    <title>Golang Cobra</title>
    <link>https://f1aming007.github.io/golang-cobra/</link>
    <pubDate>Thu, 08 Jun 2023 16:38:13 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-cobra/</guid>
    <description><![CDATA[<p># golang-cobra</p>
<ul>
<li><strong>介绍</strong>
<ul>
<li>cobra 是一个命令行程序库</li>
<li>提供了脚手架，用于生成基于cobra的应用程序框架</li>
</ul>
</li>
</ul>]]></description>
</item>
<item>
    <title>🔥Golang Quicksort</title>
    <link>https://f1aming007.github.io/golang-quicksort/</link>
    <pubDate>Thu, 08 Jun 2023 10:51:25 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-quicksort/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法---快速排序quicksort">🔥Golang算法 - 快速排序（Quicksort）</h1>
<ul>
<li>不需要排序的数组（Base case 基线条件）
<ul>
<li>[],空数组</li>
<li>[s], 单元素数组</li>
</ul>
</li>
<li>容易排序的数组
<ul>
<li>[a,b],两个元素的数组，只需坚持它们之间的大小即可，调整位置</li>
</ul>
</li>
</ul>]]></description>
</item>
<item>
    <title>🔥Golang Divide_Conquer</title>
    <link>https://f1aming007.github.io/golang-divide_conquer/</link>
    <pubDate>Wed, 07 Jun 2023 09:59:23 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-divide_conquer/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法---dc-算法">🔥Golang算法 - D&amp;C 算法</h1>
<ul>
<li>Devide &amp; Conquer</li>
</ul>
<blockquote>
<p>D &amp; C 的步骤</p>
</blockquote>
<ol>
<li>找到一个简单的基线条件（Base Case）</li>
<li>把问题分开处理。直到它变为极限条件</li>
</ol>]]></description>
</item>
<item>
    <title>Git Tag</title>
    <link>https://f1aming007.github.io/git-tag/</link>
    <pubDate>Tue, 06 Jun 2023 17:08:46 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/git-tag/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>git tag (figure)</h4>
        </figcaption>
</figure>

<h1 id="git-tag-标签管理">🚀git tag 标签管理</h1>
<ul>
<li>可以在版本库中打一个标签，确定打标签的版本</li>
<li>标签就是版本库的快照</li>
</ul>]]></description>
</item>
</channel>
</rss>
