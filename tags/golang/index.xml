<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - Tag - flamingo</title>
        <link>https://f1aming007.github.io/tags/golang/</link>
        <description>golang - Tag - flamingo</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>fxqi1221@gmail.com (flamingo)</managingEditor>
            <webMaster>fxqi1221@gmail.com (flamingo)</webMaster><lastBuildDate>Sat, 10 Jun 2023 10:06:01 &#43;0800</lastBuildDate><atom:link href="https://f1aming007.github.io/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>🔥Golang Beradth FirstSearch</title>
    <link>https://f1aming007.github.io/golang-beradth-firstsearch/</link>
    <pubDate>Sat, 10 Jun 2023 10:06:01 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-beradth-firstsearch/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法---快速排序quicksort">🔥Golang算法 - 快速排序（Quicksort）</h1>
<p>广度优先算法的核心思想是：从初始节点开始，应用算符生成第一层节点，检查目标节点是否在这些后继节点中，若没有，再用产生式规则将所有第一层的节点逐一扩展，得到第二层节点，并逐一检查第二层节点中是否包含目标节点。若没有，再用算符逐一扩展第二层的所有节点……，如此依次扩展，检查下去，直到发现目标节点为止。即</p>]]></description>
</item>
<item>
    <title>Golang Viper</title>
    <link>https://f1aming007.github.io/golang-viper/</link>
    <pubDate>Fri, 09 Jun 2023 15:39:40 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-viper/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang-viper-介绍">golang-viper 介绍</h1>
<p>viper 是一个配置解决方案，用于丰富的特性</p>
<ul>
<li>支持 JSON/TOML/YAML/HCL/envfile/Java properties 等多种格式的配置文件</li>
<li>可以设置监听配置文件的修改，修改时自动加载新的配置；</li>
<li>从环境变量、命令行选项和<code>io.Reader</code>中读取配置</li>
<li>从远程配置系统中读取和监听修改，如 etcd/Consul；</li>
<li>代码逻辑中显示设置健值</li>
</ul>]]></description>
</item>
<item>
    <title>Golang Cobra</title>
    <link>https://f1aming007.github.io/golang-cobra/</link>
    <pubDate>Thu, 08 Jun 2023 16:38:13 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-cobra/</guid>
    <description><![CDATA[<p># golang-cobra</p>
<ul>
<li><strong>介绍</strong>
<ul>
<li>cobra 是一个命令行程序库</li>
<li>提供了脚手架，用于生成基于cobra的应用程序框架</li>
</ul>
</li>
</ul>]]></description>
</item>
<item>
    <title>🔥Golang Quicksort</title>
    <link>https://f1aming007.github.io/golang-quicksort/</link>
    <pubDate>Thu, 08 Jun 2023 10:51:25 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-quicksort/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法---快速排序quicksort">🔥Golang算法 - 快速排序（Quicksort）</h1>
<ul>
<li>不需要排序的数组（Base case 基线条件）
<ul>
<li>[],空数组</li>
<li>[s], 单元素数组</li>
</ul>
</li>
<li>容易排序的数组
<ul>
<li>[a,b],两个元素的数组，只需坚持它们之间的大小即可，调整位置</li>
</ul>
</li>
</ul>]]></description>
</item>
<item>
    <title>🔥Golang Divide_Conquer</title>
    <link>https://f1aming007.github.io/golang-divide_conquer/</link>
    <pubDate>Wed, 07 Jun 2023 09:59:23 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-divide_conquer/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法---dc-算法">🔥Golang算法 - D&amp;C 算法</h1>
<ul>
<li>Devide &amp; Conquer</li>
</ul>
<blockquote>
<p>D &amp; C 的步骤</p>
</blockquote>
<ol>
<li>找到一个简单的基线条件（Base Case）</li>
<li>把问题分开处理。直到它变为极限条件</li>
</ol>]]></description>
</item>
<item>
    <title>🔥Golang Recursion</title>
    <link>https://f1aming007.github.io/golang-recursion01/</link>
    <pubDate>Tue, 30 May 2023 21:12:34 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-recursion01/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>go-work (figure)</h4>
        </figcaption>
</figure>

<h1 id="golang算法---递归">🔥Golang算法 - 递归</h1>
<ul>
<li>递归： 在运行的过程中调用自己</li>
</ul>]]></description>
</item>
<item>
    <title>Golang Context 底层原理</title>
    <link>https://f1aming007.github.io/golang-context/</link>
    <pubDate>Mon, 29 May 2023 17:00:08 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-context/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>go-work (figure)</h4>
        </figcaption>
</figure>

<h1 id="golang-context-实现原理">Golang context 实现原理</h1>
<ul>
<li>context的主要功能
<ul>
<li>异步场景中用于实现并发协调</li>
<li>对goroutine 的生命周期控制</li>
<li>有一定的数据存储能力</li>
</ul>
</li>
</ul>]]></description>
</item>
<item>
    <title>🔥Golang Selection Sort</title>
    <link>https://f1aming007.github.io/golang-selectionsort/</link>
    <pubDate>Mon, 29 May 2023 15:05:16 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-selectionsort/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>go-work (figure)</h4>
        </figcaption>
</figure>

<h1 id="golang算法--选择排序selection-sort">🔥Golang算法- 选择排序（Selection Sort)</h1>
<ul>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，</li>
<li>然后，再从剩余未排序元素中继续寻找最小（大）元素，</li>
<li>然后放到已排序序列的末尾。</li>
<li>以此类推，直到所有元素均排序完毕。</li>
</ul>]]></description>
</item>
<item>
    <title>🚀Golang BinarySearch</title>
    <link>https://f1aming007.github.io/golang-binarysearch/</link>
    <pubDate>Sat, 27 May 2023 11:35:01 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-binarysearch/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法--二分算法binary-search">🔥Golang算法- 二分算法（Binary Search）</h1>
<ul>
<li>输入：<strong>排好序</strong> 的集合</li>
<li>如果要查询的元素在集合中： 返回位置（索引）</li>
<li>否则：返回空</li>
</ul>]]></description>
</item>
<item>
    <title>Golang 命令行参数os.Args</title>
    <link>https://f1aming007.github.io/golang-args/</link>
    <pubDate>Sat, 27 May 2023 10:18:12 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-args/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang-命令行参数osargs">Golang 命令行参数os.Args</h1>
<ul>
<li>如何制作命令行应用</li>
<li>如何使用os.Args 获取命令行参数</li>
</ul>]]></description>
</item>
</channel>
</rss>
