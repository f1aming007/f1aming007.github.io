<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>算法 - Tag - flamingo</title>
        <link>https://f1aming007.github.io/tags/%E7%AE%97%E6%B3%95/</link>
        <description>算法 - Tag - flamingo</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>fxqi1221@gmail.com (flamingo)</managingEditor>
            <webMaster>fxqi1221@gmail.com (flamingo)</webMaster><lastBuildDate>Wed, 07 Jun 2023 09:59:23 &#43;0800</lastBuildDate><atom:link href="https://f1aming007.github.io/tags/%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml" /><item>
    <title>Golang Divide_Conquer</title>
    <link>https://f1aming007.github.io/golang-divide_conquer/</link>
    <pubDate>Wed, 07 Jun 2023 09:59:23 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-divide_conquer/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法---dc-算法">🔥Golang算法 - D&amp;C 算法</h1>
<ul>
<li>Devide &amp; Conquer</li>
</ul>
<blockquote>
<p>D &amp; C 的步骤</p>
</blockquote>
<ol>
<li>找到一个简单的基线条件（Base Case）</li>
<li>把问题分开处理。直到它变为极限条件</li>
</ol>]]></description>
</item>
<item>
    <title>Golang Recursion</title>
    <link>https://f1aming007.github.io/golang-recursion01/</link>
    <pubDate>Tue, 30 May 2023 21:12:34 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-recursion01/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>go-work (figure)</h4>
        </figcaption>
</figure>

<h1 id="golang算法---递归">🔥Golang算法 - 递归</h1>
<ul>
<li>递归： 在运行的过程中调用自己</li>
</ul>]]></description>
</item>
<item>
    <title>Golang Selection Sort</title>
    <link>https://f1aming007.github.io/golang-selectionsort/</link>
    <pubDate>Mon, 29 May 2023 15:05:16 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-selectionsort/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>go-work (figure)</h4>
        </figcaption>
</figure>

<h1 id="golang算法--选择排序selection-sort">🔥Golang算法- 选择排序（Selection Sort)</h1>
<ul>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，</li>
<li>然后，再从剩余未排序元素中继续寻找最小（大）元素，</li>
<li>然后放到已排序序列的末尾。</li>
<li>以此类推，直到所有元素均排序完毕。</li>
</ul>]]></description>
</item>
<item>
    <title>🚀Golang BinarySearch</title>
    <link>https://f1aming007.github.io/golang-binarysearch/</link>
    <pubDate>Sat, 27 May 2023 11:35:01 &#43;0800</pubDate>
    <author>flamingo</author>
    <guid>https://f1aming007.github.io/golang-binarysearch/</guid>
    <description><![CDATA[<p></p>
<h1 id="golang算法--二分算法binary-search">🔥Golang算法- 二分算法（Binary Search）</h1>
<ul>
<li>输入：<strong>排好序</strong> 的集合</li>
<li>如果要查询的元素在集合中： 返回位置（索引）</li>
<li>否则：返回空</li>
</ul>]]></description>
</item>
</channel>
</rss>
